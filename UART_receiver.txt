`timescale 1ns / 1ps

module Receiver_RxD(
input clk_fpga,  // 100MHz FPGA NEXYS 4 DDR board
input reset,    // reset button
input RxD,  // input signal wire
output [7:0]RxData);    //data we receive at the receiving end, using 8 LEDS on the board

//Internal Variables
reg shift;  //triggering the shifting of data
reg state, nextstate;   //initial state and next variable state
reg [3:0] bit_counter;  //total length of the bits is 10, 1 byte of data
reg [1:0] sample_counter;   //frequency = 4 times the Baudrate
reg [13:0] baudrate_counter;    //for setting up a Baudrate of 9600
reg [9:0] rxshift_reg;  //data byte ([9:1] RxData]
reg clear_bitcounter, inc_bitcounter,inc_samplecounter,clear_samplecounter;//to clear and increment the bit counter and the sample counter

//Constants
parameter clk_freq=100_000_000;    
parameter baud_rate=9_600;
parameter div_sample=4;
parameter div_counter=clk_freq/(baud_rate*div_sample);  //the frequency to divide the system clock frequency to get the frequency (div_sample) time higher then the baudrate
parameter mid_sample=(div_sample/2);    //this is the middle point of a bit where you want to sample the data
parameter div_bit=10;   // 1 start bit, 1 byte of data, 1 stop bit

assign RxData=rxshift_reg[8:1]; //assigning the RxData from the shift register

// Receiver Logic
always@(posedge clk_fpga)
begin
if(reset) begin // resets all counters when reset button is pressed
    state<=0;   //idle state
    bit_counter<=0;
    baudrate_counter<=0;
    sample_counter=0;
    end
else begin
    baudrate_counter<=baudrate_counter+1;
    if(baudrate_counter>=div_counter-1) begin   //if the counter reach the baudrate with sampling
        baudrate_counter<=0;    //reset counter
        state<=nextstate;   //it should be ready to receive the data/ switch to receive state
        if(shift)   // if shift is asserted, then load te receiving data
            rxshift_reg<={RxD,rxshift_reg[9:1]};
        if(clear_samplecounter)    //if clear is asserted, then reset the sample counter
            sample_counter<=0;
        if(inc_samplecounter)   //sample counter increses by 1
            sample_counter <= sample_counter+1;
        if(clear_bitcounter)    //if clear_bit_counter is asserted, is should reset itself
            bit_counter<=0;
        if(inc_bitcounter)     //bit_counter increses by 1
            bit_counter <= bit_counter+1;
        end
    end
end


//State Machine
always@( posedge clk_fpga)  //trigger by clock
begin
shift<=0;   //set shift to 0 to avoid any shifting,
clear_samplecounter<=0;
inc_samplecounter<=0;
clear_bitcounter<=0;
inc_bitcounter<=0;
nextstate<=0;   //idel state

case(state)
    0: begin    //idle state
        if(RxD)  //if input RxD line is asserted
            nextstate<=0;   //stay in the idle state, RxD needs to be low to start
        else begin
            nextstate<=1;   //go to receiving state
            clear_bitcounter<=1;    //trigger to clear the bitcounter
            clear_samplecounter<=1;     //trigger to clear the sample counter
            end
        end
   
    1: begin    //Receiving State
        nextstate<=1;   //stay in receiving state by default
        if(sample_counter==mid_sample-1)begin   //if the sample counter is 1, trigger shift
            shift<=1;
            if (sample_counter==div_sample-1) begin   //if the sample counter is 3 as the sample rate used is 4
                if (bit_counter==div_bit-1) begin   //check if the bit counter is 9
                    nextstate<=0;   //go to idle state
                    end
                inc_bitcounter<=1;  //trigger the increment bit counter if bit counter is not 9
                clear_samplecounter<=1;    //trigger the sample counter to reset the sample counter
                end else inc_samplecounter<=1;    // if the sample counter is not 4, or not equal to 3 (0-3)
            end
        end

    default: nextstate<=0;
endcase

end
endmodule



